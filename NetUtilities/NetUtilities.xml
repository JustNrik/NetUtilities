<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetUtilities</name>
    </assembly>
    <members>
        <member name="T:System.ActionScope">
            <summary>
                Represets a local action, which will be executed instanly and undone when the scope ends.
            </summary>
        </member>
        <member name="M:System.ActionScope.Create(System.Action,System.Action)">
            <summary>
                Creates an <see cref="T:System.ActionScope"/> with the provided starting action and undo action.
            </summary>
            <param name="startAction">
                The starting action.
            </param>
            <param name="undoAction">
                The undo action.
            </param>
            <returns>
                An <see cref="T:System.ActionScope"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either <paramref name="startAction"/> or <paramref name="undoAction"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.ActionScope.Cancel">
            <summary>
                Prevents the undo action to be executed.
            </summary>
        </member>
        <member name="M:System.ActionScope.Dispose">
            <summary>
                Executes the undo action and disposes the internal <see cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="T:System.ActionScope`1">
            <summary>
                Represets a local action, which will be executed instanly and undone when the scope ends.
            </summary>
            <typeparam name="TState">
                The arguments to be used in the scope.
            </typeparam>
        </member>
        <member name="M:System.ActionScope`1.Create(`0,System.Action{`0},System.Action{`0})">
            <summary>
                Creates an <see cref="T:System.ActionScope"/> with the provided starting action and undo action.
            </summary>
            <param name="state">
                The state.
            </param>
            <param name="startAction">
                The starting action.
            </param>
            <param name="undoAction">
                The undo action.
            </param>
            <returns>
                An <see cref="T:System.ActionScope`1"/> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="state"/>, <paramref name="startAction"/> or <paramref name="undoAction"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.ActionScope`1.Cancel">
            <summary>
                Prevents the undo action to be executed.
            </summary>
        </member>
        <member name="M:System.ActionScope`1.Dispose">
            <summary>
                Executes the undo action and disposes the internal <see cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="M:System.BoundScope.Create``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
                Creates a <see cref="T:System.BoundScope"/> with the provided value and expression.
            </summary>
            <typeparam name="TValue">
                The target value's type.
            </typeparam>
            <param name="expression">
                The expression.
            </param>
            <param name="newValue">
                The value.
            </param>
            <returns>
                A <see cref="T:System.BoundScope"/> with the provided value and expression.
            </returns>
        </member>
        <member name="M:System.BoundScope.Create``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
                Creates a <see cref="T:System.BoundScope"/> with the provided objects and expression.
            </summary>
            <typeparam name="T">
                The object's type.
            </typeparam>
            <typeparam name="TValue">
                The target value's type.
            </typeparam>
            <param name="obj">
                The object.
            </param>
            <param name="expression">
                The expression.
            </param>
            <param name="newValue">
                The value.
            </param>
            <returns>
                A <see cref="T:System.BoundScope"/> with the provided objects and expression.
            </returns>
        </member>
        <member name="M:System.BoundScope.Cancel">
            <summary>
                Prevents the undo action to be executed.
            </summary>
        </member>
        <member name="M:System.BoundScope.Dispose">
            <summary>
                Executes the undo action and disposes the internal <see cref="T:System.Threading.CancellationTokenSource"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Dictionary64`2.EnsureCapacity(System.Int32)">
            <summary>
                Ensures that the dictionary can hold up to 'capacity' entries without any further expansion of its backing storage
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Dictionary64`2.TrimExcess">
             <summary>
             Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries
             </summary>
             <remarks>
             This method can be used to minimize the memory overhead
             once it is known that no new elements will be added.
            
             To allocate minimum size storage array, execute the following statements:
            
             dictionary.Clear();
             dictionary.TrimExcess();
             </remarks>
        </member>
        <member name="M:System.Collections.Generic.Dictionary64`2.TrimExcess(System.Int32)">
            <summary>
            Sets the capacity of this dictionary to hold up 'capacity' entries without any further expansion of its backing storage
            </summary>
            <remarks>
            This method can be used to minimize the memory overhead
            once it is known that no new elements will be added.
            </remarks>
        </member>
        <member name="T:System.Collections.Generic.GenericCollectionExtensions">
            <summary>
                Extension methods for generic collections.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.AsIndexed``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Enumerates the provided collection with an index.
            </summary>
            <typeparam name="T">
                The underlying type of the collection.
            </typeparam>
            <param name="source">
                The source.
            </param>
            <returns>
                A collection enumerated by index.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Byte)">
            <summary>
                Shuffles the provided collection. 
            </summary>
            <remarks>
                You can optionally provide the amount of iterations. 
                High values may have a negative impact on performance.
            </remarks>
            <typeparam name="T">
                The type.
            </typeparam>
            <param name="source">
                The source.
            </param>
            <param name="iterations">
                The amount of iterations to perform.
            </param>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.AddOrUpdate``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Adds an element to a <see cref="T:System.Collections.Generic.IList`1"/> if it doesn't exists, otherwise it updates it.
            </summary>
            <typeparam name="T">
                The type of the element to be added.
            </typeparam>
            <param name="source">
                The source collection.
            </param>
            <param name="element">
                The element to search.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the source is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown if <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> returns true.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Gets a value given the key, or adds it if it doesn't exists.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The source dictionary.
            </param>
            <param name="key">
                The key.
            </param>
            <param name="value">
                The value.
            </param>
            <returns>
                The value associated to the provided key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either the source or the key are <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Throw when <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly"/> is <see langword="true"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.ContainsSequence``1(``0[],``0[])">
            <summary>
                Indicates if the array contains the provided sequence.
            </summary>
            <typeparam name="T">
                The underlying type of the array.
            </typeparam>
            <param name="array">
                The array.
            </param>
            <param name="sequence">
                The sequence.
            </param>
            <returns>
                <see langword="true"/> if the array contains the sequence; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either <paramref name="array"/> or <paramref name="sequence"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.ContainsSequence``1(``0[],``0[],System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Indicates if the array contains the given sequence from the provided starting index.
            </summary>
            <typeparam name="T">
                The underlying type of the array.
            </typeparam>
            <param name="array">
                The array.
            </param>
            <param name="sequence">
                The sequence.
            </param>
            <param name="startIndex">
                The start index.
            </param>
            <returns>
                <see langword="true"/> if the array contains the sequence; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="array"/> or <paramref name="sequence"/> are <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="startIndex"/> is negative, higher than or equal to the length of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.GenericCollectionExtensions.ContainsSequence``1(``0[],``0[],System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Indicates if the array contains the given sequence from the provided range.
            </summary>
            <typeparam name="T">
                The underlying type of the array.
            </typeparam>
            <param name="array">
                The array.
            </param>
            <param name="sequence">
                The sequence.
            </param>
            <param name="startIndex">
                The start index.
            </param>
            <param name="count">
                The count.
            </param>
            <returns>
                <see langword="true"/> if the array contains the sequence; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="array"/> or <paramref name="sequence"/> are <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="startIndex"/> and <paramref name="count"/> do not represent a valid range in the array.
            </exception>
        </member>
        <member name="T:System.Collections.Generic.Lookup`2">
            <summary>
                This class is an implementation of an one-to-many dictionary.
            </summary>
            <typeparam name="TKey">
                The key type.
            </typeparam>
            <typeparam name="TValue">
                The value type.
            </typeparam>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.Lookup`2"/> <see langword="class"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Lookup`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Lookup`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Lookup`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Lookup`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.Lookup`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Add(`0,System.Collections.Generic.IList{`1})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Add(`0,`1)">
            <summary>
                Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.Lookup`2"/>.
            </summary>
            <param name="key">
                The key.
            </param>
            <param name="value">
                The value.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Remove(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Generic.Lookup`2.LookupEnumerator">
            <inheritdoc cref="T:System.Collections.Generic.IEnumerator`1"/>
        </member>
        <member name="P:System.Collections.Generic.Lookup`2.LookupEnumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.LookupEnumerator.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.Lookup`2.LookupEnumerator"/> <see langword="struct"/> 
                with the provided lookup.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.LookupEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Generic.Lookup`2.Grouping">
            <inheritdoc cref="T:System.Linq.IGrouping`2"/>
        </member>
        <member name="P:System.Collections.Generic.Lookup`2.Grouping.Key">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Grouping.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Linq.IGrouping`2"/> <see langword="struct"/> 
                with the provided keys and values.
            </summary>
            <param name="key">
                The key.
            </param>
            <param name="values">
                The values.
            </param>
        </member>
        <member name="M:System.Collections.Generic.Lookup`2.Grouping.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:System.Collections.Generic.IList`1"/></returns>
        </member>
        <member name="T:System.Collections.Generic.ReadOnlyList`1">
            <summary>
            A true readonly generic list which provides most of <see cref="T:System.Collections.Generic.List`1"/> methods.
            </summary>
            <typeparam name="T">The generic type of this instance</typeparam>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyList`1.Item(System.Index)">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyList`1.Item(System.Range)">
            <summary>
                Gets a new <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> containing all elements in the provided range.
            </summary>
            <param name="range">
               The range where all elements will be taken.
            </param>
            <returns>
                A new <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> containing all elements in the provided range.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the range is outside of the bounds of this list.
            </exception>
        </member>
        <member name="P:System.Collections.Generic.ReadOnlyList`1.Count">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> <see langword="class"/>
                with the provided enumerable source.
            </summary>
            <param name="source">
                The source.
            </param>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.Lookup`2"/> <see langword="class"/> 
                with the provided list.
            </summary>
            <param name="source">
                The source list.
            </param>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.#ctor(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Generic.Lookup`2"/> <see langword="class"/>
                with the provided list. Optionally you can indicate if the reference of the list should be kept.
            </summary>
            <param name="source">
                The source list.
            </param>
            <param name="keepReference">
                Indicates if the reference of the list should be kept.
            </param>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.ReadOnlyList`1"/>.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> for the <see cref="T:System.Collections.Generic.ReadOnlyList`1"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.IndexOf(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0)"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.IndexOf(`0,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.IndexOf(`0,System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.Contains(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Contains(`0)"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.Find(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindLast(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindLastIndex(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.BinarySearch(`0)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0)"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.ConvertAll``1(System.Converter{`0,``0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.GetRange(System.Int32)">
            <summary>
                Gets a new <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> containing all elements starting from the provided index.
            </summary>
            <param name="startIndex">
                The zero-based <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> index at which the range starts.
            </param>
            <returns>
                A new <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> containing all elements in the provided range.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the range is outside of the bounds of this list.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.GetRange(System.Int32,System.Int32)">
            <inheritdoc cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)"/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.Collections.Generic.ReadOnlyList`1.GetRange(System.Range)" -->
        <member name="M:System.Collections.Generic.ReadOnlyList`1.Exists(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.TrueForAll(System.Predicate{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
        </member>
        <member name="M:System.Collections.Generic.ReadOnlyList`1.ForEach(System.Action{`0})">
            <inheritdoc cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="T:System.Collections.Locked.LockedDictionary`2">
            <summary>
                Provides a synchronized implementation of <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Locked.LockedDictionary`2.Item(`0)">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Locked.LockedDictionary`2.Keys">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Locked.LockedDictionary`2.Values">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Locked.LockedDictionary`2.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Locked.LockedDictionary`2.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.#ctor">
            <summary>
                Initializes a new instace of the <see cref="T:System.Collections.Locked.LockedDictionary`2"/> <see langword="class"/> that is empty.
            </summary>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
                Initializes a new instace of the <see cref="T:System.Collections.Locked.LockedDictionary`2"/> <see langword="class"/> that is empty,
                and references the provided dictionary.
            </summary>
            <param name="dictionary">
                The dictionary to reference.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1},System.Boolean)">
            <summary>
                Initializes a new instace of the <see cref="T:System.Collections.Locked.LockedDictionary`2"/> <see langword="class"/> that is empty,
                and optionally you can indicate if you want to reference the provided dictionary.
            </summary>
            <param name="dictionary">
                The dictionary.
            </param>
            <param name="keepReference">
                Indicates if the reference to the provided dictionary should be kept.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
                Initializes a new instace of the <see cref="T:System.Collections.Locked.LockedDictionary`2"/> <see langword="class"/> that is empty,
                and contains the elements of the provided source.
            </summary>
            <param name="source">
                The source.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
                Initializes a new instace of the <see cref="T:System.Collections.Locked.LockedDictionary`2"/> <see langword="class"/> that is empty,
                and contains the elements of the provided source.
            </summary>
            <param name="source">
                The source.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Add(`0,`1)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.ContainsKey(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Clone">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Locked.LockedDictionary`2.Enumerator">
            <summary>
                Enumerates the elements of a <see cref="T:System.Collections.Locked.LockedDictionary`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Locked.LockedDictionary`2.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Enumerator.#ctor(System.Collections.Locked.LockedDictionary{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Locked.LockedDictionary`2.Enumerator"/> <see langword="struct"/> 
                with the provided <see cref="T:System.Collections.Locked.LockedDictionary`2"/>.
            </summary>
            <param name="dictionary">
                The source dictionary.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedDictionary`2.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Locked.LockedList`1">
            <summary>
                Provides a synchronized implementation of <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Locked.LockedList`1.Item(System.Index)">
            <summary>
                Gets or sets the element at the specified index.
            </summary>
            <param name="index">
                The index.
            </param>
            <returns>
                The element at the specified <paramref name="index"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Throw when the <paramref name="index"/> is negative or higher than or equal to <see cref="P:System.Collections.Locked.LockedList`1.Count"/>.
            </exception>
        </member>
        <member name="P:System.Collections.Locked.LockedList`1.Item(System.Range)">
            <summary>
                Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Locked.LockedList`1"/>.
            </summary>
            <param name="range">
                The range.
            </param>
            <returns>
                A shallow copy of a range of elements in the source <see cref="T:System.Collections.Locked.LockedList`1"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown when index is less than 0 or higher than or equal to <see cref="P:System.Collections.Locked.LockedList`1.Count"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when index and count do not denote a valid range of elements.
            </exception>
        </member>
        <member name="P:System.Collections.Locked.LockedList`1.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Locked.LockedList`1.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Collections.Locked.LockedList`1.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Locked.LockedList`1"/> class that is empty 
                and has the default initial capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Locked.LockedList`1"/> class that is empty 
                and has the specified initial capacity.
            </summary>
            <param name="capacity">
                The capacity.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when capacity is less than 0.
            </exception>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Locked.LockedList`1"/> class that 
                references the provided <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="source">
                The source list.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.#ctor(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:System.Collections.Locked.LockedList`1"/> class that 
                optionally references the provided <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="source">
                The source list.
            </param>
            <param name="keepReference">
                Indicates if the provided list referenced should be kept.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a <see cref="T:System.Collections.Locked.LockedList`1"/> from the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Add(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the <see cref="T:System.Collections.Locked.LockedList`1"/>.
            </summary>
            <returns> 
                An enumerator that iterates through the <see cref="T:System.Collections.Locked.LockedList`1"/>.
            </returns>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.IndexOf(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Insert(System.Int32,`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Remove(`0)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:System.Collections.Locked.LockedList`1.Enumerator">
            <summary>
                Enumerates the elements of a <see cref="T:System.Collections.Locked.LockedList`1"/>.
            </summary>
            <typeparam name="T">
                The underlying type of the <see cref="T:System.Collections.Locked.LockedList`1"/>.
            </typeparam>
        </member>
        <member name="P:System.Collections.Locked.LockedList`1.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Enumerator.#ctor(System.Collections.Locked.LockedList{`0})">
            <summary>
                Initializes a new instance of a <see cref="T:System.Collections.Locked.LockedList`1.Enumerator"/> 
                with the provided <see cref="T:System.Collections.Locked.LockedList`1"/>.
            </summary>
            <param name="list">
                The source list.
            </param>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:System.Collections.Locked.LockedList`1.Enumerator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:System.Diagnostics.ProcessExtensions">
            <summary>
                Utility class for <see cref="T:System.Diagnostics.Process"/>
            </summary>
        </member>
        <member name="M:System.Diagnostics.ProcessExtensions.Shell(System.Diagnostics.Process,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Diagnostics.ProcessWindowStyle,System.String,System.Diagnostics.ProcessOptions)">
            <summary>
                Extension for a Shell() function that allows overloading of the working directory variable.
                It must be a <see cref="T:System.String"/> but can be variables that returns strings.
            </summary>
            <param name="process">
                 The <see cref="T:System.Diagnostics.Process" /> component for which is used to execute the target process.
             </param>
            <param name="fileName">
                The process file name to execute.
            </param>
            <param name="arguments">
                The commands to pass to the process file to execute.
            </param>
            <param name="redirectStandardOutput">
                Indicates if the standard output should be redirected on the target process.
            </param>
            <param name="redirectStandardError">
                Indicates if the standard error should be redirected on the target process.
            </param>
            <param name="useShellExecute">
                Indicates if shell execute should be used instead.
            </param>
            <param name="createNoWindow">
                Indicates if a no window should be created for the process.
            </param>
            <param name="windowStyle">
                The window style for the target process.
            </param>
            <param name="workingDirectory">
                The working directory for the target process.
            </param>
            <param name="options"> 
                The options for which to also include for the <see cref="T:System.Diagnostics.Process"/> component.
            </param>
            <returns>
                <see cref="F:System.String.Empty"/>, process stdout data or process stderr data.
            </returns>
        </member>
        <member name="M:System.Diagnostics.ProcessExtensions.Shell(System.Diagnostics.Process,System.Diagnostics.ProcessOptions)">
            <summary>
                Extension for a Shell() function that allows overloading of the working directory variable.
                It must be a <see cref="T:System.String"/> but can be variables that returns strings.
            </summary>
            <param name="process">
                 The <see cref="T:System.Diagnostics.Process" /> component for which is used to execute the target process.
             </param>
            <param name="options"> 
                The options for which to also include for the <see cref="T:System.Diagnostics.Process"/> component.
            </param>
            <returns>
                <see cref="F:System.String.Empty"/>, process stdout data or process stderr data.
            </returns>
        </member>
        <member name="T:System.Diagnostics.ProcessOptions">
            <summary>
                Extra options for the <see cref="T:System.Diagnostics.Process"/> component.
            </summary>
        </member>
        <member name="P:System.Diagnostics.ProcessOptions.WaitForProcessExit">
            <summary>
                Instucts the <see cref="T:System.Diagnostics.Process" /> to wait until the executed process terminates.
            </summary>
        </member>
        <member name="P:System.Diagnostics.ProcessOptions.Executing">
            <summary>
                Indicates if the target process is executing (has not been actually started yet), or is being executed (started); otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="T:System.EventManager`1">
            <summary>
                This class is a handy wrapper for automatic event wrapping.
                You shouldn't use this class to dynamically add/remove handlers frequently
                as this class relys on <see cref="N:System.Reflection"/> which may negatively affect
                the performance of your application.
            </summary>
            <typeparam name="TSource">
                The source of the events
            </typeparam>
        </member>
        <member name="P:System.EventManager`1.Source">
            <summary>
                The source of the events
            </summary>
        </member>
        <member name="M:System.EventManager`1.#ctor(`0)">
            <summary>
                Creates an instance of <see cref="T:System.EventManager`1"/> with the instance of the source provided.
            </summary>
            <param name="source">
                The source of the events.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.EventManager`1.AddHandlers(System.Object,System.Reflection.BindingFlags)">
            <summary>
                Adds all the handlers to the methods that have <see cref="T:System.HandlesAttribute"/>.
            </summary>
            <param name="target">
                The instance of object that will listen to the events.
            </param>
            <param name="flags">
                The flags used for <see cref="N:System.Reflection"/> to search the methods that will listen to the events.
            </param>
        </member>
        <member name="M:System.EventManager`1.RemoveHandlers(System.Object)">
            <summary>
                Removes all handlers to the methods with <see cref="T:System.HandlesAttribute"/>.
            </summary>
            <param name="target">
                The instance of object that is currently listening to the events.
            </param>
        </member>
        <member name="P:System.HandlesAttribute.EventInfo">
            <summary>
            The event metadata.
            </summary>
        </member>
        <member name="M:System.HandlesAttribute.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Creates an attribute that is used for metadata to gather the needed information for <see cref="T:System.EventManager`1"/>
            </summary>
            <exception cref="T:System.EventNotFoundException">Thrown when the event can't be found.</exception>
            <param name="eventSourceType">The type of the source of events.</param>
            <param name="eventName">The name of the event, recommended to use <see langword="nameof"/>() operator to prevent <see cref="T:System.EventNotFoundException"/>.</param>
            <param name="flags">The flags used to search the event.</param>
            <param name="methodName">The name of the method. This is gathered from <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/> so any value you pass here is ommited.</param>
        </member>
        <member name="T:System.ICloneable`1">
            <summary>
                Supports cloning, which creates a new instance of a class with the same value as an existing instance.
            </summary>
            <typeparam name="T">
                The type.
            </typeparam>
        </member>
        <member name="M:System.ICloneable`1.Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
                A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:System.Int24">
            <summary>
                Represents a 24-bit signed integer
            </summary>
        </member>
        <member name="F:System.Int24.MaxValue">
            <summary>
                Represents the largest possible value of an <see cref="T:System.Int24"/>. This field is constant.
            </summary>
        </member>
        <member name="F:System.Int24.MinValue">
            <summary>
                Represents the smallest possible value of <see cref="T:System.Int24"/>. This field is constant.
            </summary>
        </member>
        <member name="M:System.Int24.#ctor(System.UInt24)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.UInt24"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.UInt32"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.Int32"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.UInt64"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.Byte)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.IntPtr"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.UIntPtr)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.UIntPtr"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.SByte)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.Int16)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.UInt16)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.Int64)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> to the value of the specified <see cref="T:System.Int64"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> from three bytes in the byte array.
            </summary>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="value"/> length is not 3.
            </exception>
            <param name="value">
                 The array to convert into a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.Byte[],System.Int32)">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> from three bytes at a specific position in the byte array.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="startIndex"/> is outside the bounds of the array. 
                -or- 
                the range from the <paramref name="startIndex"/> to the span length is not 3.
            </exception>
            <param name="value">
                 The array to convert into a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
                Initializes a new instance of <see cref="T:System.Int24"/> from three bytes in the span.
            </summary>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="value"/> length is not 3.
            </exception>
            <param name="value">
                 The span to convert into a <see cref="T:System.Int24"/>.
            </param>
        </member>
        <member name="M:System.Int24.GetBytes">
            <summary>
                Returns this instance's value as a byte array.
            </summary>
            <returns>
                This instance's value as a byte array.
            </returns>
        </member>
        <member name="M:System.Int24.Parse(System.String)">
            <summary>
                Converts the string representation of a number to its 24-bit signed integer equivalent.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="input"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="input"/> represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
            </exception>
            <returns>
                A 24-bit signed integer equivalent to the number contained in <paramref name="input"/>.
            </returns>
        </member>
        <member name="M:System.Int24.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
                Converts the string representation of a number in a specified style to its 32-bit signed integer equivalent.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="input"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="input"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="input"/> represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
                -or- 
                <paramref name="input"/> includes non-zero, fractional digits.
            </exception>
            <returns>
                A 24-bit signed integer equivalent to the number contained in <paramref name="input"/>.
            </returns>
        </member>
        <member name="M:System.Int24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Converts the string representation of a number in a specified style and culture-specific format to its 24-bit signed integer equivalent.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="input"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="input"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="input"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="input"/> represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
                -or- 
                <paramref name="input"/> includes non-zero, fractional digits.
            </exception>
            <returns>
                A 24-bit signed integer equivalent to the number contained in <paramref name="input"/>.
            </returns>
        </member>
        <member name="M:System.Int24.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Converts the span representation of a number in a specified style and culture-specific format to its 24-bit signed integer equivalent.
            </summary>
            <param name="span">
                A span containing the characters representing the number to convert.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="span"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="span"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="span"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="span"/> represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>.
                -or- 
                <paramref name="span"/> includes non-zero, fractional digits.
            </exception>
            <returns>
                A 24-bit signed integer equivalent to the number contained in <paramref name="span"/>.
            </returns>
        </member>
        <member name="M:System.Int24.TryParse(System.String,System.Int24@)">
            <summary>
                Converts the string representation of a number to its 24-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit signed integer value equivalent of the number contained in <paramref name="input"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="input"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Int24.TryParse(System.ReadOnlySpan{System.Char},System.Int24@)">
            <summary>
                Converts the span representation of a number to its 24-bit signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="span">
                A span containing the characters that represent the number to convert.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit signed integer value equivalent of the number contained in <paramref name="span"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="span"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="span"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Int24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int24@)">
            <summary>
                Converts the string representation of a number in a specified style and culture-specific format to its 24-bit signed integer equivalent. 
                A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">
                A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="input"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="input"/>.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit signed integer value equivalent of the number contained in <paramref name="input"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="input"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <returns>
                <see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Int24.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int24@)">
            <summary>
                Converts the span representation of a number in a specified style and culture-specific format to its 24-bit signed integer equivalent. 
                A return value indicates whether the conversion succeeded.
            </summary>
            <param name="span">
                A span containing the characters that represent the number to convert. The span is interpreted using the style specified by <paramref name="style"/>.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="span"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="span"/>.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit signed integer value equivalent of the number contained in <paramref name="input"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="span"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.Int24.MinValue"/> or greater than <see cref="F:System.Int24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <returns>
                <see langword="true"/> if <paramref name="span"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:System.IO.IOExtensions">
            <summary>
                Utility class for <see cref="N:System.IO"/>.
            </summary>
        </member>
        <member name="M:System.IO.IOExtensions.Read``1(System.IO.Stream)">
            <summary>
                Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
                This is equal to the size of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
                The type of the value to be read.
            </typeparam>
            <param name="stream">
                The stream.
            </param>
            <returns>
                A value of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:System.IO.IOExtensions.Write``1(System.IO.Stream,``0)">
            <summary>
                Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
                This is equal to the size of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
                The type of the value to be written
            </typeparam>
            <param name="stream">
                The stream.
            </param>
            <param name="value">
                The value.
            </param>
        </member>
        <member name="T:System.IO.ValueStringReader">
            <summary>
                Zero allocation equivalent of <see cref="T:System.IO.StringReader"/>.
            </summary>
        </member>
        <member name="P:System.IO.ValueStringReader.Current">
            <summary>
                Returns the current character. <see langword="null"/> if the end is reached.
            </summary>
        </member>
        <member name="M:System.IO.ValueStringReader.#ctor(System.ReadOnlySpan{System.Char})">
            <summary>
                Initializes an instance of <see cref="T:System.IO.ValueStringReader"/> <see langword="struct"/> with the provided <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>.
            </summary>
            <param name="span">
                The span to read.
            </param>
        </member>
        <member name="M:System.IO.ValueStringReader.#ctor(System.String)">
            <summary>
                Initializes an instance of <see cref="T:System.IO.ValueStringReader"/> <see langword="struct"/> with the provided <see cref="T:System.String"/>.
            </summary>
            <param name="span">
                The span to read.
            </param>
        </member>
        <member name="M:System.IO.ValueStringReader.Read">
            <summary>
                Reads the next characters and advances one position of the buffer.
            </summary>
            <returns>
                The current character after advancing one position. <see langword="null"/> if the buffer is completely read.
            </returns>
        </member>
        <member name="M:System.IO.ValueStringReader.ReadLine">
            <summary>
                Reads all the characters until a new line is found.
            </summary>
            <returns>
                A <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/> with all characters found, excluding the new line.
            </returns>
        </member>
        <member name="M:System.IO.ValueStringReader.ReadToEnd">
            <summary>
                Fully reads the buffer from the current position.
            </summary>
            <returns>
                A <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/> with all the characters from the current position until the end of the buffer.
            </returns>
        </member>
        <member name="T:System.Linq.LinqExtensions">
            <summary>
                More extensions method for <see cref="N:System.Linq"/>.
            </summary>
        </member>
        <member name="M:System.Linq.LinqExtensions.BatchBy``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Batches the collection into a collection of collections of an specific size.
            </summary>
            <typeparam name="TSource">
                The underlying type of the collection.
            </typeparam>
            <param name="source">
                The collection.
            </param>
            <param name="size">
                The size of the buckets.
            </param>
            <returns>
                An enumerable bulked by the given size.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either source or selector are <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when a negative size is given.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.BatchBy``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Collections.Generic.IEnumerable{``0},``1})">
            <summary>
                Batches the collection into a collection of collection of an specific size and returns the selected member.
            </summary>
            <typeparam name="TSource">
                The underlying type of the source collection.
            </typeparam>
            <typeparam name="TResult">
                The underlying type of the resulting collection.
            </typeparam>
            <param name="source">
                The source collection.
            </param>
            <param name="size">
                The size of the buckets.
            </param>
            <param name="selector">
                The selector delegate.
            </param>
            <returns>
                An enumerable bulked by the given size.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either source or selector are <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when size is less than 0.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
                Uses the selector to return a collection without duplicates based on <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </summary>
            <typeparam name="TSource">
                The underlying type of the source of the collection.
            </typeparam>
            <typeparam name="TKey">
                The type of the selected member.
            </typeparam>
            <param name="source">
                The source collection.
            </param>
            <param name="selector">
                The selector delegate used to filter duplicates.
            </param>
            <returns>
                A sequence without duplicates based on <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either the source or the selector are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Uses the selector to return a collection without duplicates based on <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </summary>
            <typeparam name="TSource">
                The underlying type of the source of the collection.
            </typeparam>
            <typeparam name="TKey">
                The type of the selected member.
            </typeparam>
            <param name="source">
                The source collection.
            </param>
            <param name="selector">
                The selector delegate used to filter duplicates.
            </param>
            <param name="comparer">The comparer used to filter duplicates.</param>
            <returns>
                A sequence without duplicates based on <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either the source or the selector are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Invokes an action for each element in the sequence.
            </summary>
            <typeparam name="T">
                The underlying type of the sequence.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="action">
                The action to be executed on each item of the sequence.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either the source or the action are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``1},``0,System.Action{``0,``1})">
            <summary>
                Invokes an action for each element in the sequence with the provided parameters.
            </summary>
            <typeparam name="TState">
                The type of the parameters to be passed.
            </typeparam>
            <typeparam name="T">
                The underlying type of the sequence.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="action">
                The action delegate to be executed on each item of the sequence.
            </param>
            <param name="state">
                The arguments to be passed to the action delegate.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either the source or the action are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Joins the sequence of strings into a single string.
            </summary>
            <param name="source">
                The string sequence.
            </param>
            <param name="separator">
                The separator used to join the strings. <see cref="F:System.String.Empty"/> if no separator is provided.
            </param>
            <returns>
                A single <see cref="T:System.String"/> with all the elements of the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Throw when the source is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.Join(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
                Joins the sequence of chars into a single string.
            </summary>
            <param name="source">
                The char sequence.
            </param>
            <param name="separator">
                The separator used to join the chars. <see cref="F:System.String.Empty"/> if no separator is provided.
            </param>
            <returns>
                A single <see cref="T:System.String"/> with all the elements of the sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Throw when the source is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Skips all the elements while the predicate is <see langword="true"/>.
            </summary>
            <typeparam name="TSource">
                The underlying type of the sequence.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="predicate">
                The delegated to filter the items.
            </param>
            <returns>
                A sequence of items
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either source or predicate are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.SkipUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Skips all the elements until the predicate is <see langword="true"/>.
            </summary>
            <typeparam name="TSource">
                The underlying type of the sequence.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="predicate">
                The delegated to filter the items.
            </param>
            <returns>
                A sequence of items
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either source or predicate are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.TakeUntil``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Takes all the elements until the predicate is <see langword="true"/>.
            </summary>
            <typeparam name="TSource">
                The underlying type of the sequence.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="predicate">
                The delegated to filter the items.
            </param>
            <returns>
                A sequence of items
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either source or predicate are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Takes all the elements while the predicate is <see langword="true"/>.
            </summary>
            <typeparam name="TSource">
                The underlying type of the sequence.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="predicate">
                The delegated to filter the items.
            </param>
            <returns>
                A sequence of items
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either source or predicate are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
                Turns an sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 
                into a <see cref="T:System.Collections.Generic.Dictionary`2"/> using the key and value of the pair.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The sequence
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.Dictionary`2"/> with the given sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when source is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Turns an sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 
                into a <see cref="T:System.Collections.Generic.Dictionary`2"/> using the key and value of the pair 
                with the comparer provided.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="comparer">
                The comparer.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.Dictionary`2"/> with the given sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when source or comparer are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
                Turns an sequence of <see cref="T:System.ValueTuple`2"/> 
                into a <see cref="T:System.Collections.Generic.Dictionary`2"/> using the key and value of the pair.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="comparer">
                The comparer.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.Dictionary`2"/> with the given sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when source or comparer are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Turns an sequence of <see cref="T:System.ValueTuple`2"/> 
                into a <see cref="T:System.Collections.Generic.Dictionary`2"/> using the key and value of the pair 
                with the comparer provided.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <param name="comparer">
                The comparer.
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.Dictionary`2"/> with the given sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when source or comparer are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ToReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Creates a <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> from the dictionary provided.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <param name="source">The sequence.</param>
            <returns>
                A <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2"/> from the dictionary provided.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when source is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Linq.LinqExtensions.ToReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Creates as <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> from the sequence provided.
            </summary>
            <typeparam name="T">
                The underlying type of the sequence.
            </typeparam>
            <param name="source">
                The sequence.
            </param>
            <returns>A <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> from the provided sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when source is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.MathExtensions.GetNextPowerOfTwo(System.UInt32)">
            <summary>
                Gets the smallest power of 2 that is higher than or equal to the provided value.
            </summary>
            <param name="value">
                The value.
            </param>
            <returns>
                The smallest power of 2 that is higher than or equal to the provided value.
            </returns>
        </member>
        <member name="M:System.MathExtensions.IsPowerOf2(System.Int32)">
            <summary>
            Returns a boolean indicating if the provided number is a power of 2.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathExtensions.IsPowerOf2(System.UInt32)">
            <summary>
            Returns a boolean indicating if the provided number is a power of 2.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathExtensions.IsPowerOf2(System.Int64)">
            <summary>
            Returns a boolean indicating if the provided number is a power of 2.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathExtensions.IsPowerOf2(System.UInt64)">
            <summary>
            Returns a boolean indicating if the provided number is a power of 2.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathExtensions.GetDigits(System.UInt32)">
            <summary>
            Gets the amount of digits in the provided number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathExtensions.GetDigits(System.Int32)">
            <summary>
            Gets the amount of digits in the provided number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathExtensions.GetDigits(System.Int64)">
            <summary>
            Gets the amount of digits in the provided number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.MathExtensions.GetDigits(System.UInt64)">
            <summary>
            Gets the amount of digits in the provided number.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:System.MathX">
            <summary>
                This class provides some math helper methods that <see cref="T:System.Math"/> doesn't provide.
            </summary>
        </member>
        <member name="F:System.MathX.SquareSumThreshold">
            <summary>
                The maximum value you can provide to <see cref="M:System.MathX.SquareSum(System.UInt32)"/>
            </summary>
        </member>
        <member name="F:System.MathX.CubicSumThreshold">
            <summary>
                The maximum value you can provide to <see cref="M:System.MathX.CubicSum(System.UInt32)"/>
            </summary>
        </member>
        <member name="M:System.MathX.Sum(System.UInt32)">
            <summary>
                Returns the sum of all integers from 1 to <paramref name="n"/>.
            </summary>
            <param name="n">
                The upper limit of the numbers to be sum.
            </param>
            <returns>
                The sum of all integers from 1 to <paramref name="n"/>.
            </returns>
            <exception cref="T:System.OverflowException">
                Thrown when the result would be higher than <see cref="F:System.UInt32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.MathX.Sum(System.UInt32,System.UInt32)">
            <summary>
                Returns the sum of all integers from <paramref name="k"/> to <paramref name="n"/>.
            </summary>
            <param name="k">
                The lower limit of the numbers to be sum.
            </param>
            <param name="n">
                The upper limit of the numbers to be sum.
            </param>
            <returns>
                The sum of all integers from <paramref name="k"/> to <paramref name="n"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown when <paramref name="k"/> is higher than <paramref name="n"/>.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when the result would be higher than <see cref="F:System.UInt32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.MathX.SquareSum(System.UInt32)">
            <summary>
                Returns the sum of the squares of all integers from 1 to <paramref name="n"/>.
            </summary>
            <param name="n">
                The upper limit of the numbers to be sum.
            </param>
            <returns>
                The sum of the squares of all integers from 1 to <paramref name="n"/>.
            </returns>
            <exception cref="T:System.OverflowException">
                Thrown when the result would be higher than <see cref="F:System.UInt32.MaxValue"/> (<paramref name="n"/> >= 2344)
            </exception>
        </member>
        <member name="M:System.MathX.SquareSum(System.UInt32,System.UInt32)">
            <summary>
                Returns the sum of the squares of all integers from <paramref name="k"/> to <paramref name="n"/>.
            </summary>
            <param name="k">
                The lower limit of the numbers to be sum.
            </param>
            <param name="n">
                The upper limit of the numbers to be sum.
            </param>
            <returns>
                The sum of the squares of all integers from <paramref name="k"/> to <paramref name="n"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown when <paramref name="k"/> is higher than <paramref name="n"/>.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when the result would be higher than <see cref="F:System.UInt32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:System.MathX.CubicSum(System.UInt32)">
            <summary>
                Returns the sum of the cubes of all integers from 1 to <paramref name="n"/>.
            </summary>
            <param name="n">
                The upper limit of the numbers to be sum.
            </param>
            <returns>
                The sum of the cubes of all integers from 1 to <paramref name="n"/>.
            </returns>
            <exception cref="T:System.OverflowException">
                Thrown when the result would be higher than <see cref="F:System.UInt32.MaxValue"/> (<paramref name="n"/> >= 362).
            </exception>
        </member>
        <member name="M:System.MathX.CubicSum(System.UInt32,System.UInt32)">
            <summary>
                Returns the sum of the cubes of all integers from <paramref name="k"/> to <paramref name="n"/>.
            </summary>
            <param name="k">
                The lower limit of the numbers to be sum.
            </param>
            <param name="n">
                The upper limit of the numbers to be sum.
            </param>
            <returns>
                The sum of the cubes of all integers from <paramref name="k"/> to <paramref name="n"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown when <paramref name="k"/> is higher than <paramref name="n"/>.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when the result would be higher than <see cref="F:System.UInt32.MaxValue"/>.
            </exception>
        </member>
        <member name="T:System.MutableString">
            <summary>
            This class is a handy wrapper of <see cref="T:System.Text.StringBuilder"/> class for string manipulation with minimal cost.
            </summary>
        </member>
        <member name="P:System.MutableString.Length">
            <summary>
            Gets or sets the Length of the builder in the current instance.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="P:System.MutableString.Capacity">
            <summary>
            Gets or sets the Capacity of the builder in the current instance.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="P:System.MutableString.Item(System.Index)">
            <summary>
            Gets or sets a <see cref="T:System.Char"/> in the specified <see cref="T:System.Index"/>.
            </summary>
            <param name="index"/>
            <returns/>
        </member>
        <member name="P:System.MutableString.Item(System.Int32)">
            <summary>
            Gets or sets a <see cref="T:System.Char"/> in the specified index.
            </summary>
            <param name="index"/>
            <returns/>
        </member>
        <member name="P:System.MutableString.Item(System.Range)">
            <summary>
            Gets or sets a <see cref="T:System.String"/> in the specified <see cref="T:System.Range"/>.
            The input string must have the same length of the string you want to edit, otherwise an <see cref="T:System.IndexOutOfRangeException"/> will be thrown.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"/>
            <param name="range"/>
            <returns/>
        </member>
        <member name="P:System.MutableString.Item(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Returns a <see cref="T:System.Text.RegularExpressions.MatchCollection"/> with the provided pattern.
            </summary>
            <param name="pattern">The <see cref="T:System.Text.RegularExpressions.Regex"/> pattern to be used</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to be used</param>
            <returns>A collection of <see cref="T:System.Text.RegularExpressions.Match"/> objects</returns>
        </member>
        <member name="P:System.MutableString.Item(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Returns a <see cref="T:System.String"/> with the replacement applied on the pattern given. This method doesn't mutate the current instance.
            </summary>
            <param name="pattern"/>
            <param name="replacement"/>
            <param name="options"/>
            <returns/>
        </member>
        <member name="P:System.MutableString.MaxCapacity">
            <summary>
            Returns the maximun capacity of the builder.
            </summary>
        </member>
        <member name="M:System.MutableString.Reverse">
            <summary>
            Reverse the current <see cref="T:System.MutableString"/>
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.MutableString.ContainsAny(System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:System.MutableString.ContainsAll(System.String[])" -->
        <member name="M:System.MutableString.Indent(System.Int32,System.Char)">
            <summary>
            Jumps to the next line and adds many amount of chars in the beginning of the line.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:System.MutableString.RangeOf(System.String)">
            <summary>
            Returns the range in which the matching input is found. Returns null if not found.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.MutableString.IsNullOrEmpty(System.MutableString)">
            <summary>
            Returns true if the <see cref="T:System.MutableString"/> is null or empty.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.MutableString.IsNullOrWhiteSpace(System.MutableString)">
            <summary>
            Returns true if the <see cref="T:System.MutableString"/> is null, empty or consists only of white-spaces characters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:System.Randomizer">
            <inheritdoc/>
        </member>
        <member name="P:System.Randomizer.Shared">
            <summary>
                Gets a shared <see cref="T:System.Randomizer"/> instance.
            </summary>
        </member>
        <member name="M:System.Randomizer.Next``1">
            <summary>
                Generates a random value of the provided type.
            </summary>
            <typeparam name="T">
                The type.
            </typeparam>
            <returns>
                A random value of the provided type.
            </returns>
        </member>
        <member name="T:System.Reflection.ConstructorData">
            <inheritdoc/>
        </member>
        <member name="P:System.Reflection.ConstructorData.Parameters">
            <summary>
                Gets the parameters of the constructor this data reflects.
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorData.IsDefault">
            <summary>
                Indicates if this constructor data reflects the default constructor.
            </summary>
        </member>
        <member name="M:System.Reflection.ConstructorData.#ctor(System.Reflection.ConstructorInfo,System.Type)">
            <summary>
                Initializes a new instance of <see cref="T:System.Reflection.ConstructorData"/> class 
                with the provided <see cref="T:System.Reflection.ConstructorInfo"/> and <see cref="T:System.Type"/>.
            </summary>
            <param name="constructor">
                The constructor.
            </param>
            <param name="target">
                The target.
            </param>
        </member>
        <member name="M:System.Reflection.ConstructorData.CreateInstance">
            <summary>
                Creates an instance of the type this constructor belongs to.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                Throw if this constructors requires parameters 
                -- OR -- 
                the type this constructor belongs to is either <see langword="abstract"/> or <see langword="static"/>.
            </exception>
            <returns>
                An instance of the type this constructor belongs to.
            </returns>
        </member>
        <member name="M:System.Reflection.ConstructorData.CreateInstance(System.Object[])">
            <summary>
                Creates an instance of the type this constructor belongs to with the provided arguments.
            </summary>
            <param name="args">
                The arguments.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when the supplied arguments count is different from the parameters count of this constructor.
            </exception>
            <exception cref="T:System.InvalidCastException">
                Thrown when one of the arguments couldn't be casted to the respective type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the type this constructor belongs to is either <see langword="abstract"/> or <see langword="static"/>.
            </exception>
            <returns>
                An instance of the type this constructor belongs to.
            </returns>
        </member>
        <member name="T:System.Reflection.EventData">
            <inheritdoc/>
        </member>
        <member name="P:System.Reflection.EventData.EventHandlerType">
            <summary>
                Gets the <see cref="T:System.Type"/> object of the underlying event-handler delegate associated with this event.
            </summary>
        </member>
        <member name="P:System.Reflection.EventData.IsStatic">
            <summary>
                Indicates if the <see langword="event"/> this data reflects to is <see langword="static"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.EventData.#ctor(System.Reflection.EventInfo)">
            <summary>
                Initializes a new instance of <see cref="T:System.Reflection.EventData"/> class with the provided <see cref="T:System.Reflection.EventInfo"/>.
            </summary>
            <param name="event">
                The event.
            </param>
        </member>
        <member name="M:System.Reflection.EventData.AddHandler(System.Object,System.Delegate)">
            <summary>
                Adds a handler to the event this data reflects.
            </summary>
            <remarks>
                The <paramref name="instance"/> must be <see langword="null"/> if the event is <see langword="static"/>.<br/>
                The <paramref name="instance"/> must <b>not</b> be <see langword="null"/> if the event is <b>not</b> <see langword="static"/>.
            </remarks>
            <param name="instance">
                The instance object.
            </param>
            <param name="handler">
                The handler.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="handler"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                Thrown when one of the arguments couldn't be casted to the respective type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when <paramref name="instance"/> is <see langword="null"/> and the event is an instance event. 
                -- or -- 
                when the <paramref name="instance"/> is not <see langword="null"/> and the event is <see langword="static"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.EventData.RemoveHandler(System.Object,System.Delegate)">
            <summary>
                Removes a handler to the event this data reflects.
            </summary>
            <remarks>
                The <paramref name="instance"/> must be <see langword="null"/> if the event is <see langword="static"/>.<br/>
                The <paramref name="instance"/> must <b>not</b> be <see langword="null"/> if the event is <b>not</b> <see langword="static"/>.
            </remarks>
            <param name="instance">
                The instance object.
            </param>
            <param name="handler">
                The handler.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="handler"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidCastException">
                Thrown when one of the arguments couldn't be casted to the respective type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when <paramref name="instance"/> is <see langword="null"/> and the event is an instance event. 
                -- or -- 
                when the <paramref name="instance"/> is not <see langword="null"/> and the event is <see langword="static"/>.
            </exception>
        </member>
        <member name="T:System.Reflection.Factory">
            <summary>
                This class is a helper to create instance of objects whose types are only known at runtime.
            </summary>
        </member>
        <member name="M:System.Reflection.Factory.CreateInstance(System.Type)">
            <summary>
                Gets the instance of a generic type with a parameterless constructor.
                Performs much better than <see cref="M:System.Activator.CreateInstance(System.Type)"/>
            </summary>
        </member>
        <member name="M:System.Reflection.Factory.CreateInstance``1">
            <inheritdoc cref="M:System.Reflection.Factory`1.CreateInstance"/>
        </member>
        <member name="M:System.Reflection.Factory.Clone``1(``0)">
            <inheritdoc cref="M:System.Reflection.Factory`1.Clone(`0)"/>
        </member>
        <member name="T:System.Reflection.Factory`1">
            <summary>
                This class is a helper to create instance of objects without the performance loss of <see cref="M:System.Activator.CreateInstance``1"/>.
            </summary>
            <typeparam name="T">
                The type whose instance will be created.
            </typeparam>
        </member>
        <member name="M:System.Reflection.Factory`1.CreateInstance">
            <summary>
                Gets a new instance of <typeparamref name="T"/>.
                Performs much better than <see cref="M:System.Activator.CreateInstance``1"/>
            </summary>
        </member>
        <member name="M:System.Reflection.Factory`1.Clone(`0)">
            <summary>
                Creates a shallow copy of the provided object.
            </summary>
            <param name="obj">
                The object to be cloned.
            </param>
            <returns>
                A shallow copy of the provided object.
            </returns>
        </member>
        <member name="T:System.Reflection.FieldData">
            <inheritdoc/>
        </member>
        <member name="P:System.Reflection.FieldData.FieldType">
            <summary>
                Gets the type of the field this data reflects.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldData.IsNullable">
            <summary>
                Indicates if the type of the field this data reflects is a nullable type 
                (<see langword="class"/>, <see langword="interface"/> or <see cref="T:System.Nullable`1"/>).
            </summary>
        </member>
        <member name="P:System.Reflection.FieldData.IsStatic">
            <summary>
                Indicates if the field this data reflects is <see langword="static"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.FieldData.#ctor(System.Reflection.FieldInfo)">
            <summary>
                Initializes a new instance of <see cref="T:System.Reflection.FieldData"/> class 
                with the provided <see cref="T:System.Reflection.FieldInfo"/> and target.
            </summary>
            <param name="field">
                The field.
            </param>
        </member>
        <member name="M:System.Reflection.FieldData.GetValue(System.Object)">
            <summary>
                Gets the value of the field reflected in the instance provided.
            </summary>
            <remarks>
                The <paramref name="instance"/> must be <see langword="null"/> if the field is <see langword="static"/>.
            </remarks>
            <param name="instance">
                The instance object.
            </param>
            <exception cref="T:System.InvalidOperationException">
                Thrown when <paramref name="instance"/> is <see langword="null"/> but the field is an instance field. 
                -- or --
                when <paramref name="instance"/> is not <see langword="null"/> but the field is a <see langword="static"/> field. 
            </exception>
            <returns>
                The value of the field reflected in the instance provided.
            </returns>
        </member>
        <member name="M:System.Reflection.FieldData.SetValue(System.Object,System.Object)">
            <summary>
                Gets the value of the field reflected in the instance and value provided.
            </summary>
            <remarks>
                The <paramref name="instance"/> must be <see langword="null"/> if the field is <see langword="static"/>.<br/>
                The <paramref name="value"/> must <b>not</b> be <see langword="null"/> if the property type is <b>not</b> a nullable type (<see langword="class"/>, <see langword="interface"/> or <see cref="T:System.Nullable`1"/>).
            </remarks>
            <param name="instance">
                The instance object.
            </param>
            <exception cref="T:System.InvalidOperationException">
                Thrown when <paramref name="instance"/> is <see langword="null"/> but the field is an instance field. 
                -- or --
                when <paramref name="instance"/> is not <see langword="null"/> but the field is a <see langword="static"/> field. 
                -- or --
                when <paramref name="value"/> is <see langword="null"/> but the field is not a nullable type (<see langword="class"/>, <see langword="interface"/> or <see cref="T:System.Nullable`1"/>).
            </exception>
        </member>
        <member name="T:System.Reflection.Mapper">
            <summary>
                Handy class to map reflection metadata and provide high performance runtime manipulation.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper.CustomAttributes">
            <summary>
                Contains data related to the type's custom attributes.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper.CustomAttributeDatas">
            <summary>
                Contains data related to the type's custom attribute data for assemblies, modules, 
                types, members and parameters that are loaded into the reflection-only context.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper.Constructors">
            <summary>
                Contains data related to the type's constructors
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper.Events">
            <summary>
                Contains data related to the type's events
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper.Fields">
            <summary>
                Contains data related to the type's fields
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper.Methods">
            <summary>
                Contains data related to the type's methods
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper.Properties">
            <summary>
                Contains data related to the type's properties
            </summary>
        </member>
        <member name="M:System.Reflection.Mapper.#ctor(System.Object)">
            <summary>
                Initializes a new instance of <see cref="T:System.Reflection.Mapper"/> class with the provided instance object.
            </summary>
            <param name="object">
                The object.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown if <paramref name="object"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.Mapper.#ctor(System.Type)">
            <summary>
                Initializes a new instance of <see cref="T:System.Reflection.Mapper"/> class with the provided type.
            </summary>
            <param name="type">
                The type.
            </param>
        </member>
        <member name="T:System.Reflection.Mapper`1">
            <summary>
                Handy class to map reflection metadata and provide high performance runtime manipulation.
            </summary>
            <typeparam name="T">
                The type.
            </typeparam>
        </member>
        <member name="P:System.Reflection.Mapper`1.CustomAttributes">
            <summary>
                Contains data related to the <typeparamref name="T"/>'s custom attributes.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper`1.CustomAttributeDatas">
            <summary>
                Contains data related to the <typeparamref name="T"/>'s custom attribute data for assemblies, modules, 
                types, members and parameters that are loaded into the reflection-only context.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper`1.Constructors">
            <summary>
                Gets the <see cref="T:System.Reflection.ConstructorData"/> for all constructors of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper`1.Events">
            <summary>
                Gets the <see cref="T:System.Reflection.EventData"/> for all events of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper`1.Fields">
            <summary>
                Gets the <see cref="T:System.Reflection.FieldData"/> for all fields of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper`1.Methods">
            <summary>
                Gets the <see cref="T:System.Reflection.MethodData"/> for all methods of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="P:System.Reflection.Mapper`1.Properties">
            <summary>
                Gets the <see cref="T:System.Reflection.PropertyData"/> for all properties of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:System.Reflection.MemberData`1">
            <summary>
                Contains rich data and provides helper methods for a <typeparamref name="TMember"/>.
            </summary>
            <typeparam name="TMember">
                The <see cref="T:System.Reflection.MemberInfo"/> type.
            </typeparam>
        </member>
        <member name="P:System.Reflection.MemberData`1.Member">
            <summary>
                Gets the <see cref="T:System.Reflection.MemberInfo"/> for this class.
            </summary>
        </member>
        <member name="P:System.Reflection.MemberData`1.CustomAttributes">
            <summary>
                Gets the custom attributes of this member.
            </summary>
        </member>
        <member name="P:System.Reflection.MemberData`1.CustomAttributeDatas">
            <summary>
                Gets the custom attribute datas of this member.
            </summary>
        </member>
        <member name="T:System.Reflection.MethodData">
            <inheritdoc/>
        </member>
        <member name="P:System.Reflection.MethodData.Parameters">
            <summary>
                Gets the parameters of the method this data reflects.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodData.GenericArguments">
            <summary>
                Gets the generic arguments of the method this data reflects.
            </summary>
        </member>
        <member name="M:System.Reflection.MethodData.#ctor(System.Reflection.MethodInfo)">
            <summary>
                Initializes a new instance of <see cref="T:System.Reflection.MethodData"/> class 
                with the provided <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method">
                The method.
            </param>
        </member>
        <member name="M:System.Reflection.MethodData.Invoke(System.Object,System.Object[])">
            <summary>
                Invokes the method this data reflects.
            </summary>
            <remarks>
                The <paramref name="instance"/> must be <see langword="null"/> if the method is <see langword="static"/>.<br/>
                The <paramref name="instance"/> must <b>not</b> be <see langword="null"/> if the method is <b>not</b> <see langword="static"/>.
            </remarks>
            <param name="instance">
                The instance object.
            </param>
            <param name="parameters">
                The parameters the reflected method requires.
            </param>
            <exception cref="T:System.InvalidCastException">
                Thrown when one of the arguments couldn't be casted to the respective type.
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the instance is <see langword="null"/> and the method is an instance method. 
                -- or -- 
                when the instance is not <see langword="null"/> and the method is <see langword="static"/>.
                -- or -- 
                when the parameters length doesn't match the method parameters count.
            </exception>
            <returns>
                The value the method this data reflects returns. <see langword="null"/> if the return type of the reflected method is <see langword="void"/>.
            </returns>
        </member>
        <member name="T:System.Reflection.PropertyData">
            <inheritdoc/>
        </member>
        <member name="P:System.Reflection.PropertyData.Parameters">
            <summary>
                Gets the parameters of the property this data reflects.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyData.Getter">
            <summary>
                Gets the <see cref="T:System.Reflection.MethodInfo"/> that reflects the getter of this data reflected property.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyData.Setter">
            <summary>
                Gets the <see cref="T:System.Reflection.MethodInfo"/> that reflects the setter of this data reflected property.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyData.PropertyType">
            <summary>
                Gets the <see cref="T:System.Type"/> of the property this data reflects.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyData.IsNullable">
            <summary>
                Indicates if the property this data reflects returns a nullable type (class, interface or <see cref="T:System.Nullable`1"/>).
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyData.IsIndexer">
            <summary>
                Indicates if the property this data reflects is an indexer.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyData.IsStatic">
            <summary>
                Indicates if the property this data reflects is <see langword="static"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.PropertyData.#ctor(System.Reflection.PropertyInfo)">
            <summary>
                Initializes a new instance of <see cref="T:System.Reflection.PropertyData"/> class 
                with the provided <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="property">
                The property.
            </param>
        </member>
        <member name="M:System.Reflection.PropertyData.GetValue(System.Object)">
            <summary>
                Gets the value of the property this data reflects given the instance. 
            </summary>
            <remarks>
                The <paramref name="instance"/> must be <see langword="null"/> if the property is <see langword="static"/>.<br/>
                The <paramref name="instance"/> must <b>not</b> be <see langword="null"/> if the property is <b>not</b> <see langword="static"/>.
            </remarks>
            <param name="instance">
                The instance object.
            </param>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the property has no getter. 
                -- or --
                when the instance is <see langword="null"/> but the property is not <see langword="static"/>.
                -- or --
                when the instance is not <see langword="null"/> but the property is <see langword="static"/>.
            </exception>
            <returns>
                The value of the property this data reflects.
            </returns>
        </member>
        <member name="M:System.Reflection.PropertyData.SetValue(System.Object,System.Object)">
            <summary>
                Gets the value of the property this data reflects given the instance. 
            </summary>
            <remarks>
                The <paramref name="instance"/> must be <see langword="null"/> if the property is <see langword="static"/>.<br/>
                The <paramref name="instance"/> must <b>not</b> be <see langword="null"/> if the property is <b>not</b> <see langword="static"/>.<br/>
                The <paramref name="value"/> must <b>not</b> be <see langword="null"/> if the property type is <b>not</b> a nullable type (<see langword="class"/>, <see langword="interface"/> or <see cref="T:System.Nullable`1"/>).
            </remarks>
            <param name="instance">
                The instance object.
            </param>
            <param name="value">
                The value.
            </param>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the property has no getter. 
                -- or --
                when the instance is <see langword="null"/> but the property is not <see langword="static"/>.
                -- or --
                when the instance is not <see langword="null"/> but the property is <see langword="static"/>.
            </exception>
        </member>
        <member name="T:System.Reflection.ReflectionExtensions">
            <summary>
                This class provides extension methods for <see cref="N:System.Reflection"/>
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.Inherits(System.Type,System.Type)">
            <summary>
                Indicates if the <paramref name="child"/> type inherits from the <paramref name="parent"/> type.
            </summary>
            <remarks>
                This method will return <see langword="false"/> if:
                <list type="number">
                    <item>
                        <paramref name="child"/> is an <see langword="interface"/> but <paramref name="parent"/> is not.
                    </item>
                    <item>
                        <paramref name="child"/> and <paramref name="parent"/> are the same type.
                    </item>
                    <item>
                        <paramref name="child"/> does not inherit from <paramref name="parent"/>.
                    </item>
                </list>
            </remarks>
            <param name="child">
                The child type.
            </param>
            <param name="parent">
                The parent type.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="child"/> inherits from <paramref name="parent"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Throw when either <paramref name="child"/> or <paramref name="parent"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.Implements(System.Type,System.Type)">
            <summary>
                Indicates if the <paramref name="child"/> type implements from the <paramref name="parent"/> type.
            </summary>
            <remarks>
                This method will return <see langword="false"/> if:
                <list type="number">
                    <item>
                        <paramref name="child"/> is an <see langword="interface"/>.
                    </item>
                    <item>
                        <paramref name="parent"/> is not an <see langword="interface"/>.
                    </item>
                    <item>
                        <paramref name="child"/> doesn't implement <paramref name="parent"/>.
                    </item>
                </list>
            </remarks>
            <param name="child">
                The child type.
            </param>
            <param name="parent">
                The parent type.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="child"/> implements from <paramref name="parent"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Throw when either <paramref name="child"/> or <paramref name="parent"/> are <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.IsTuple(System.Type)">
            <summary>
                Indicates if the type implements <see cref="T:System.Runtime.CompilerServices.ITuple"/>.
            </summary>
            <param name="type">
                The type.
            </param>
            <returns>
                <see langword="true"/> if the type implements <see cref="T:System.Runtime.CompilerServices.ITuple"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
                Indicates if the type is <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="type">
                The target type to check
            </param>
            <returns>
                <see langword="true"/> if the type is <see cref="T:System.Nullable`1"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.IsStatic(System.Type)">
            <summary>
                Indicates if the type is <see langword="static"/>.
            </summary>
            <param name="type">
                The type.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="type"/> is <see langword="static"/>; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.TryGetCustomAttribute``1(System.Type,``0@,System.Boolean)">
            <summary>
                Attempts to get the custom attribute of the given type.
            </summary>
            <typeparam name="T">
                The type of the attribute to search.
            </typeparam>
            <param name="type">
                The type.
            </param>
            <param name="attribute">
                The attribute.
            </param>
            <param name="inherited">
                Checks if it should inspect of ancestors of the given type.
            </param>
            <returns></returns>
            <exception cref = "T:System.ArgumentNullException"> 
                Thrown when <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.GetEnumFieldAttribute``2(``1,System.Boolean)">
            <summary>
                Returns the specified attribute if exists on the give value of the <see langword="enum"/>.
            </summary>
            <typeparam name="TAttribute">
                The type of the attribute.
            </typeparam>
            <typeparam name="TEnum">
                The type of the <see langword="enum"/>.
            </typeparam>
            <param name="enum">
                The <see langword="enum"/>.
            </param>
            <param name="inherited">
                Indicates if it should inspect for the ancestors.
            </param>
            <returns>
                The specified attribute if exists on the give value of the <see langword="enum"/>; otherwise, <see langword="null"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.IsUnmanaged``1(``0)">
            <summary>
                Indicates if <typeparamref name="T"/> is an <see langword="unmanaged"/> type.
            </summary>
            <remarks>
                This method returns <see langword="true"/> if <typeparamref name="T"/> is an <see langword="unmanaged"/> type.
                An <see langword="unmanaged"/> type meets the following conditions:
                <list type="bullet">
                    <item>
                        <description>
                            The type is a <see langword="struct"/>.
                        </description>
                    </item>
                    <item>
                        <description>
                            None of its fields are reference types, pointers, or structures that constains such fields.
                        </description>
                    </item>
                </list>
            </remarks>
            <typeparam name="T">
                The type.
            </typeparam>
            <param name="_">
                This parameter is ignored.
            </param>
            <returns>
                <see langword="true"/> if the type is an <see langword="unmanaged"/> type; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.GetRuntimeConstructors(System.Type)">
            <summary>
                Retrieves a collection that represents all methods defined on a specified type.
            </summary>
            <param name="type">
                The type that contains the methods.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="type"/> is <see langword="null"/>.
            </exception>
            <returns>
                A collection of methods for the specified type.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionExtensions.Clone``1(``0)">
            <inheritdoc cref="M:System.Reflection.Factory`1.Clone(`0)"/>
        </member>
        <member name="T:System.Reflection.ReflectionHelper">
            <summary>
                This class provides helper methods for <see cref="N:System.Reflection"/>.
            </summary>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.HasDefaultConstructor(System.Type)">
            <summary>
                Indicates if <paramref name="type"/> contains a default constructor. 
            </summary>
            <remarks>
                Always returns <see langword="true"/> if <paramref name="type"/> is a <see langword="struct"/>.
            </remarks>
            <param name="type">The type.</param>
            <returns>
                <see langword="true"/> if the type is a struct or has a parameterless constructor; otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="type"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.HasDefaultConstructor``1">
            <summary>
                Indicates if <typeparamref name="T"/> contains a default constructor. 
            </summary>
            <remarks>
                Always returns <see langword="true"/> if <typeparamref name="T"/> is a <see langword="struct"/>.
            </remarks>
            <typeparam name="T">
                The type.
            </typeparam>
            <returns>
                <see langword="true"/> if the type is a struct or has a parameterless constructor; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.IsNullable``1">
            <summary>
                Indicates if <typeparamref name="T"/>'s default value is <see langword="null"/>.
            </summary>
            <typeparam name="T">
                The type.
            </typeparam>
            <returns>
                <see langword="true"/> if the <typeparamref name="T"/>'s default value is <see langword="null"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Reflection.ReflectionHelper.GetAllTypes">
            <summary>
                Get all types from all assemblies in <see cref="P:System.AppDomain.CurrentDomain"/>.
            </summary>
            <remarks>
                This operation is expensive, so caching the result of this method is recommended.
            </remarks>
            <returns>
                An array containing all types from all assemblies in <see cref="P:System.AppDomain.CurrentDomain"/>.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.AsString(System.Char[])">
            <summary>
                Creates a <see cref="T:System.String"/> with the provided array.
            </summary>
            <param name="charArray">
                The array.
            </param>
            <returns>
                A new <see cref="T:System.String"/> built from the array provided.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.AsString(System.ReadOnlySpan{System.Char})">
            <summary>
                Creates a <see cref="T:System.String"/> with the provided span.
            </summary>
            <param name="charSpan">
                The span.
            </param>
            <returns>
                A new <see cref="T:System.String"/> build from the span provided.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.SubstringBetween(System.String,System.Char,System.Char,System.Int32,System.Boolean)">
            <summary>
                Returns the substring between two <see cref="T:System.Char"/> delimiters. Optionally, you can include them into the result.
            </summary>
            <param name="input">
                The input.
            </param>
            <param name="leftBound">
                The left bound.
            </param>
            <param name="rightBound">
                The right bound.
            </param>
            <param name="includeBounds">
                Indicates if bounds should be included in the substring.
            </param>
            <returns>
                The substring between two <see cref="T:System.Char"/> delimiters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Throw when the input is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the startIndex is greater than or equal to input's lenght.
            </exception>
        </member>
        <member name="M:System.SystemUtilities.SubstringBetween(System.MutableString,System.Char,System.Char,System.Int32,System.Boolean)">
            <summary>
                Returns the substring between two <see cref="T:System.Char"/> delimiters. Optionally, you can include them into the result.
            </summary>
            <param name="input">
                The input.
            </param>
            <param name="leftBound">
                The left bound.
            </param>
            <param name="rightBound">
                The right bound.
            </param>
            <param name="includeBounds">
                Indicates if bounds should be included in the substring.
            </param>
            <returns>
                The substring between two <see cref="T:System.Char"/> delimiters.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Throw when the input is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when the startIndex is greater than or equal to input's lenght.
            </exception>
        </member>
        <member name="M:System.SystemUtilities.IndexesOf(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
                Gets all the indexes of the provided <see cref="T:System.Char"/>, this method returns an empty array if no indexes are found.
            </summary>
            <param name="input">
                The input.
            </param>
            <param name="value">
                The value.
            </param>
            <param name="startIndex">
                The starting index.
            </param>
            <param name="count">
                The amount of characters to search
            </param>
            <returns>
                A <see cref="T:System.Collections.Generic.ReadOnlyList`1"/> with all indexes found.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.ToMutable(System.String)">
            <summary>
                Creates a <see cref="T:System.MutableString"/> with the <see cref="T:System.String"/> provided.
            </summary>
            <param name="value">
                The string.
            </param>
            <returns>
                A <see cref="T:System.MutableString"/>.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.Reverse(System.String)">
            <summary>
                Returns a new <see cref="T:System.String"/> with the reversed characters.
            </summary>
            <param name="str">
                The string to be reversed.
            </param>
            <returns>
                A reversed string.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when the provided string is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.SystemUtilities.Like(System.String,System.String)">
            <summary>
                Returns a boolean indicating if both strings are similar content-wise (case-insensitive).
            </summary>
            <param name="str">
                The string to be compared.
            </param>
            <param name="other">
                The string to look for similarities.
            </param>
            <param name="comparison">
                The comparison to be used to determine if they are alike.
            </param>
            <returns>
                <see langword="true"/> if the strings are similar (case-insensitive); otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown when either str or other are <see langword="null"/>.
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:System.SystemUtilities.ContainsAny(System.String,System.String[])" -->
        <!-- Badly formed XML comment ignored for member "M:System.SystemUtilities.ContainsAny(System.String,System.StringComparison,System.String[])" -->
        <member name="M:System.SystemUtilities.ContainsAll(System.String,System.String[])">
            <summary>
                Indicates if the string contains all of the words provided.
            </summary>
            <param name="str">
                The string.
            </param>
            <param name="words">
                The words.
            </param>
            <returns>
                <see langword="true"/> if the string contains all of the provided words, otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
                Indicates if the string contains all of the words provided.
            </summary>
            <param name="str">
                The string.
            </param>
            <param name="comparisonType">
                The comparison to be used.
            </param>
            <param name="words">
                The words.
            </param>
            <returns>
                <see langword="true"/> if the string contains all of the provided words, otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.Quote(System.String)">
            <summary>
                Quotes the given <see cref="T:System.String"/>.
            </summary>
            <param name="str">
                The string.
            </param>
            <returns>A quoted <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:System.SystemUtilities.IsType``1(System.Object)">
            <summary>
                Checks if the runtime type of obj is the targeted one.
            </summary>
            <typeparam name="T">
                Target type.
            </typeparam>
            <param name="obj">
                The object.
            </param>
            <returns>
                <see langword="true"/> if the runtime type of obj is the targeted one; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.IsType(System.Object,System.Type)">
            <summary>
                Checks if the runtime type of obj is the targeted one.
            </summary>
            <param name="obj">
                The object.
            </param>
            <param name="targetType">
                The type.
            </param>
            <returns>
                <see langword="true"/> if the runtime type of obj is the targeted one; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.SystemUtilities.GetFlags``1(``0)">
            <summary>
                Gets each flags of the given <typeparamref name="TEnum"/> instance.
            </summary>
            <typeparam name="TEnum">
                Type of the <see cref="T:System.Enum"/>.
            </typeparam>
            <param name="enum">
                The <see cref="T:System.Enum"/> object.
            </param>
            <returns>
                A <typeparamref name="TEnum"/>[] containing all the flags found in the current instance.
            </returns>
        </member>
        <member name="T:System.Threading.Tasks.SynchronizationContextRemover">
            <summary>
                This structure is used to remove <see cref="P:System.Threading.SynchronizationContext.Current"/>. 
                This helps to reduce the verbosity of using <see cref="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)"/>
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.SynchronizationContextRemover.IsCompleted">
            <summary>
                Indicates if <see cref="P:System.Threading.SynchronizationContext.Current"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.SynchronizationContextRemover.OnCompleted(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:System.Threading.Tasks.SynchronizationContextRemover.GetAwaiter">
            <summary>
                Returns the current instace of <see cref="T:System.Threading.Tasks.SynchronizationContextRemover"/>.
            </summary>
            <returns>
                The current instace of <see cref="T:System.Threading.Tasks.SynchronizationContextRemover"/>.
            </returns>
        </member>
        <member name="M:System.Threading.Tasks.SynchronizationContextRemover.GetResult">
            <summary>
                This method does nothing.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TasksExtensions.Discard(System.Threading.Tasks.Task)">
            <summary>
                Fires and forgets the task.
            </summary>
            <param name="_">
                The task to discard.
            </param>
        </member>
        <member name="M:System.Threading.Tasks.TasksExtensions.Discard(System.Threading.Tasks.ValueTask)">
            <summary>
                Fires and forgets the task.
            </summary>
            <param name="_">
                The task to discard.
            </param>
        </member>
        <member name="M:System.Threading.Tasks.TasksExtensions.Discard``1(System.Threading.Tasks.ValueTask{``0})">
            <summary>
                Fires and forgets the task.
            </summary>
            <param name="_">
                The task to discard.
            </param>
        </member>
        <member name="T:System.UInt24">
            <summary>
                Represents a 24-bit unsigned integer
            </summary>
        </member>
        <member name="F:System.UInt24.MaxValue">
            <summary>
                Represents the largest possible value of <see cref="T:System.UInt24"/>. This field is constant.
            </summary>
        </member>
        <member name="F:System.UInt24.MinValue">
            <summary>
                Represents the smallest possible value of <see cref="T:System.UInt24"/>. This field is constant.
            </summary>
        </member>
        <member name="M:System.UInt24.#ctor(System.Int24)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.Int24"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.UInt32)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.UInt32"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.Int32"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.UInt64)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.UInt64"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.Byte)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.IntPtr)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.IntPtr"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.UIntPtr)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.UIntPtr"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.SByte)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.SByte"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.Int16)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.Int16"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.UInt16)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.Int64)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> to the value of the specified <see cref="T:System.Int64"/>.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value"/> is a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <param name="value">
                 The value to represent as a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.Byte[])">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> from three bytes in the byte array.
            </summary>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="value"/> length is not 3.
            </exception>
            <param name="value">
                 The array to convert into a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.Byte[],System.Int32)">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> from three bytes at a specific position in the byte array.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="startIndex"/> is outside the bounds of the array. 
                -or- 
                the range from the <paramref name="startIndex"/> to the span length is not 3.
            </exception>
            <param name="value">
                 The array to convert into a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
                Initializes a new instance of <see cref="T:System.UInt24"/> from three bytes in the span.
            </summary>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="value"/> length is not 3.
            </exception>
            <param name="value">
                 The span to convert into a <see cref="T:System.UInt24"/>.
            </param>
        </member>
        <member name="M:System.UInt24.GetBytes">
            <summary>
                Returns this instance's value as a byte array.
            </summary>
            <returns>
                This instance's value as a byte array.
            </returns>
        </member>
        <member name="M:System.UInt24.Parse(System.String)">
            <summary>
                Converts the string representation of a number to its 24-bit unsigned integer equivalent.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="input"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="input"/> represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
            </exception>
            <returns>
                A 24-bit unsigned integer equivalent to the number contained in <paramref name="input"/>.
            </returns>
        </member>
        <member name="M:System.UInt24.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
                Converts the string representation of a number in a specified style to its 32-bit unsigned integer equivalent.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="input"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="input"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="input"/> represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
                -or- 
                <paramref name="input"/> includes non-zero, fractional digits.
            </exception>
            <returns>
                A 24-bit unsigned integer equivalent to the number contained in <paramref name="input"/>.
            </returns>
        </member>
        <member name="M:System.UInt24.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Converts the string representation of a number in a specified style and culture-specific format to its 24-bit unsigned integer equivalent.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="input"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="input"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="input"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="input"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="input"/> represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
                -or- 
                <paramref name="input"/> includes non-zero, fractional digits.
            </exception>
            <returns>
                A 24-bit unsigned integer equivalent to the number contained in <paramref name="input"/>.
            </returns>
        </member>
        <member name="M:System.UInt24.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Converts the span representation of a number in a specified style and culture-specific format to its 24-bit unsigned integer equivalent.
            </summary>
            <param name="span">
                A span containing the characters representing the number to convert.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="span"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="span"/>.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <exception cref="T:System.FormatException">
                Thrown when <paramref name="span"/> is not in the correct format.
            </exception>
            <exception cref="T:System.OverflowException">
                Thrown when <paramref name="span"/> represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>.
                -or- 
                <paramref name="span"/> includes non-zero, fractional digits.
            </exception>
            <returns>
                A 24-bit unsigned integer equivalent to the number contained in <paramref name="span"/>.
            </returns>
        </member>
        <member name="M:System.UInt24.TryParse(System.String,System.UInt24@)">
            <summary>
                Converts the string representation of a number to its 24-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">
                A string containing a number to convert.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit unsigned integer value equivalent of the number contained in <paramref name="input"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="input"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.UInt24.TryParse(System.ReadOnlySpan{System.Char},System.UInt24@)">
            <summary>
                Converts the span representation of a number to its 24-bit unsigned integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="span">
                A span containing the characters that represent the number to convert.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit unsigned integer value equivalent of the number contained in <paramref name="span"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="span"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <returns>
                <see langword="true"/> if <paramref name="span"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.UInt24.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt24@)">
            <summary>
                Converts the string representation of a number in a specified style and culture-specific format to its 24-bit unsigned integer equivalent. 
                A return value indicates whether the conversion succeeded.
            </summary>
            <param name="input">
                A string containing a number to convert. The string is interpreted using the style specified by <paramref name="style"/>.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="input"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="input"/>.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit unsigned integer value equivalent of the number contained in <paramref name="input"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="input"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <returns>
                <see langword="true"/> if <paramref name="input"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.UInt24.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt24@)">
            <summary>
                Converts the span representation of a number in a specified style and culture-specific format to its 24-bit unsigned integer equivalent. 
                A return value indicates whether the conversion succeeded.
            </summary>
            <param name="span">
                A span containing the characters that represent the number to convert. The span is interpreted using the style specified by <paramref name="style"/>.
            </param>
            <param name="style">
                A bitwise combination of the enumeration values that indicates the style elements that can be present in <paramref name="span"/>. 
                A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Integer"/>.
            </param>
            <param name="provider">
                An object that supplies culture-specific information about the format of <paramref name="span"/>.
            </param>
            <param name="result">
                When this method returns, contains the 24-bit unsigned integer value equivalent of the number contained in <paramref name="input"/>, 
                if the conversion succeeded, or zero if the conversion failed. 
                The conversion fails if the <paramref name="span"/> parameter is <see langword="null"/> or <see cref="F:System.String.Empty"/>, is not of the correct format, 
                or represents a number less than <see cref="F:System.UInt24.MinValue"/> or greater than <see cref="F:System.UInt24.MaxValue"/>. This parameter is passed uninitialized;
                any value originally supplied in result will be overwritten.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown when <paramref name="style"/> is not a <see cref="F:System.Globalization.NumberStyles.Integer"/> value.
                -or- 
                <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values.
            </exception>
            <returns>
                <see langword="true"/> if <paramref name="span"/> was converted successfully; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:System.Xml.XmlConvert.SerializeObject``1(``0)">
            <summary>
                Serializes the object into XML Format
            </summary>
            <typeparam name="T">
                Type of the object that will be serialized
            </typeparam>
            <param name="obj">
                The object to be serialized
            </param>
            <returns>
                A string with the XML representation of the object provided.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                Thrown if the object is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Xml.XmlConvert.DeserializeObject``1(System.String)">
            <summary>
                Deserializes a XML Formatted string into an object
            </summary>
            <typeparam name="T">
                Type of the object that will be serialized
            </typeparam>
            <param name="input">
                The Formatted XML string
            </param>
            <returns>
                The object of type <typeparamref name="T"/> being deserialized.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                Thrown if the deserialization fails.
            </exception>
        </member>
    </members>
</doc>
