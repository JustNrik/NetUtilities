using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xunit;

namespace NetUtilities.Tests.System.Int24Tests
{
    public class Int24InterfaceTests
    {
        private IFormatProvider stringFormat;

        [Fact]
        public void EqualsTo_InterfaceTest()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)24;

            Int24 value2 = new Int24();
            value2 = (Int24)24;

            Int24 faultyValue3 = new Int24();

            var expected = value1.Equals(value2);

            var actual = value1.Equals(value2);

            Assert.Equal(expected, actual);
            Assert.False(faultyValue3.Equals(value1));
        }

        [Fact]
        public void CompareToInt24_InterfaceTest()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)24;

            Int24 value2 = new Int24();
            value2 = (Int24)24;

            Int24 faultyValue3 = new Int24();

            var expected = value1.CompareTo(value2);

            var actual = value2.CompareTo(value1);

            var faulty = faultyValue3.CompareTo(value1);

            Assert.Equal(expected, actual);
            Assert.Equal(-1, faulty);
        }

        [Fact]
        public void CompareToObject_InterfaceTest()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)24;

            IComparable comparableField;

            comparableField = (IComparable)value1;

            // The expected object is an Int32 with a value of 1
            object obj = new Int32();
            obj = 1;

            // Comparison compares 1 object to 1 object, making it 1-1
            var actual = comparableField.CompareTo(obj);

            // 1-1 (of same type) = true;
            Assert.Equal(obj, actual);
        }

        [Fact]
        public void ToString_Test()
        {
            string format = "222";

            Int24 value1 = new Int24();
            value1 = (Int24)222;

            Int24 value2 = new Int24();
            value2 = (Int24)222;

            var expected = value1.ToString(format, stringFormat);

            var actual = value2.ToString();

            Assert.Equal(expected, actual);

            Assert.NotNull(expected);
        }

        [Fact]
        public void GetTypeCode_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var typeCode = convertField.GetTypeCode();

            var expected = "Int32";

            Assert.Equal(expected, typeCode.ToString());
        }

        [Fact]
        public void GetBoolean_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convert = (IConvertible)value1;

            var ToBoolean = convert.ToBoolean(stringFormat);

            Assert.True(ToBoolean);
        }

        [Fact]
        public void ToByteConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToByte(stringFormat);

            var expected = value1.ToString();

            Assert.Equal(expected, actual.ToString());
        }

        [Fact]
        public void ToCharConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToChar(stringFormat);

            Assert.IsType<char>(actual);
        }

        [Fact]
        public void ToDateTimeConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)202101;
            
            IConvertible convertField;

            convertField = (IConvertible)value1;

            Assert.Throws<InvalidCastException>(() => convertField.ToDateTime(stringFormat));
        }

        [Fact]
        public void ToDecimalConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToDecimal(stringFormat);

            Assert.IsType<Decimal>(actual);
        }

        [Fact]
        public void ToDoubleConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToDouble(stringFormat);

            Assert.IsType<Double>(actual);
        }

        [Fact]
        public void ToInt16Convert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToInt16(stringFormat);

            Assert.IsType<Int16>(actual);
        }

        [Fact]
        public void ToInt32Convert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToInt32(stringFormat);

            Assert.IsType<Int32>(actual);
        }

        [Fact]
        public void ToInt64Convert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToInt64(stringFormat);

            Assert.IsType<Int64>(actual);
        }

        [Fact]
        public void ToSByteConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)2;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToSByte(stringFormat);

            Assert.IsType<SByte>(actual);
        }

        [Fact]
        public void ToSingleConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToSingle(stringFormat);

            Assert.IsType<Single>(actual);
        }

        [Fact]
        public void ToStringConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToString(stringFormat);
            var expected = "222";

            Assert.IsType<String>(actual);
            Assert.Equal(expected, actual);
        }

        [Fact]
        public void ToTypeConvert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;
            Type typeForConversion = typeof(Int64);

            convertField = (IConvertible)value1;

            var actual = convertField.ToType(typeForConversion, stringFormat);

            Assert.IsType<Int64>(actual);
        }

        [Fact]
        public void ToUInt16Convert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToUInt16(stringFormat);

            Assert.IsType<UInt16>(actual);
        }

        [Fact]
        public void ToUInt32Convert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToUInt32(stringFormat);

            Assert.IsType<UInt32>(actual);
        }

        [Fact]
        public void ToUInt64Convert_Test()
        {
            Int24 value1 = new Int24();
            value1 = (Int24)222;

            IConvertible convertField;

            convertField = (IConvertible)value1;

            var actual = convertField.ToUInt64(stringFormat);

            Assert.IsType<UInt64>(actual);
        }

    }
}
